<?xml version="1.0" encoding="utf-8"?>
<flow name="DoctorFlow" package="iristk.app.doctor" 
	initial="Idle" xmlns="iristk.flow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="iristk.flow.param"
	xmlns:dialog="iristk.situated.SituatedDialog"
	xsi:schemaLocation="iristk.flow flow.xsd iristk.situated.SituatedDialog SituatedDialog.xsd">
	
	<import class="iristk.app.quiz.QuestionSet"/>
	<import class="iristk.app.quiz.Question"/>
	
	<param name="questions" type="QuestionSet"/>
	<param name="dialog" type="iristk.situated.SituatedDialog"/>
	
	<var name="users" type="iristk.situated.UserModel" value="dialog.getUsers()"/>
	<var name="question" type="Question"/>
	<var name="guess" type="int" value="0"/>
	<var name="winningScore" type="int" value="3"/>
	<var name="map" type="DiseaseMap" value="new DiseaseMap()"/> <!-- How clean! -->
	
	
	
	<state id="Idle">
		<onentry>
			<dialog:attendNobody />
			<!-- no dirtyness anymore -->
			<!-- To add new diseases go to the init method of DiseaseMap.java -->
		</onentry>
		<onevent name="sense.user.enter">
			<dialog:attend target="event:agent"/>
			<dialog:say>Hi there</dialog:say>
			<send event="action.gesture" p:name="'smile'"/>
			<goto state="Question1"/>
		</onevent>
	</state>
	
	<state id="Dialog">
		<onevent name="sense.user.leave"  cond="users.isAttending(event) or users.isAttendingAll()">
			<if cond="users.hasAny()">
				<dialog:attendRandom/>
				<reentry/>
			<else />
				 <goto state="Goodbye"/>
			</if>
		</onevent>
	</state>
	
	<state id="Goodbye">
		<onentry>
			<dialog:say>Goodbye</dialog:say>
			<goto state="Idle"/>
		</onentry>
	</state>
	
	
	<state id="Question1"  extends="Dialog">
		<onentry>
			<if cond="users.hasMany()">
				<dialog:attendAll/>
			</if>
			<dialog:say>How do you feel?</dialog:say>
			<send event="action.gesture" p:name="'sleep'"/>
			<dialog:listen/>
			
		</onentry>
		<onevent name="sense.user.speech**" cond="event?:sem:good">
		<dialog:say>Oh, then you don't need me!</dialog:say>
			<goto state="Goodbye"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:bad">
			<dialog:say>Okay, let's see if I can help you!</dialog:say>
			 <goto state="soar_throat"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
			<reentry/>
		</onevent>
		<onevent name="sense.user.speech**">
			<reentry/>
		</onevent>
	</state>
	
	<state id="soar_throat"  extends="Dialog">
		<onentry>
			<!-- So smooth ! -->
			<exec>map.questionSymptom(Symptom.SOARTHROAT)</exec>
			<dialog:say>Do you have a soar throat?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<dialog:say>You have a soar throat!</dialog:say>
			<send event="action.gesture" p:name="'emotion_anger'"/>
			<!-- So smooth ! (2) -->
			<exec>map.answerSymptom(Symptom.SOARTHROAT)</exec>
			<goto state="cough"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<send event="action.gesture" p:name="'wake_up'"/>
			<goto state="cough"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
		
		
		<!--  I think you should do test cases into one "onevent" bloc instead of several "onevent" blocs
		since the event name is the same. I think it will be more readable this way. -->
		
		
	</state>
	
	<state id="cough"  extends="Dialog">
		<onentry>
			<!-- So smooth ! (3) -->
			<exec>map.questionSymptom(Symptom.COUGH)</exec>
			<dialog:say>Are you suffering from cough?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<!-- So smooth ! (4) -->
			<exec>map.answerSymptom(Symptom.COUGH)</exec>
			<dialog:say>Okay</dialog:say>
			<goto state="headache"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no"> 
			<dialog:say>Good for you</dialog:say>
			<goto state="headache"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	
	<state id="headache"  extends="Dialog">
		
		
		<!-- Your turn to be smooth now ! See the Symptom.java file. -->
		
		
		<onentry>
			<exec>map.questionSymptom(Symptom.HEADACHE)</exec>
			<dialog:say>Are you suffering from headache?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes">
			<exec>map.answerSymptom(Symptom.HEADACHE)</exec>
			<dialog:say>Okay</dialog:say>
			<goto state="sleepy"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no"> 
			<dialog:say>Good for you</dialog:say>
			<goto state="sleepy"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	
	<state id="sleepy"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.SLEEPY)</exec>
			<dialog:say>Are you sleepy?</dialog:say>
			<dialog:listen/>
			
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
						<exec>map.answerSymptom(Symptom.SLEEPY)</exec>
			<dialog:say>Okay</dialog:say>
			<goto state="fever"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no"> 
	
			<dialog:say>Good for you, pneumonia</dialog:say>
			<goto state="fever"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="fever"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.FEVER)</exec>
			<dialog:say>Do you have fever?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
		<exec>map.answerSymptom(Symptom.FEVER)</exec>
			<dialog:say>Okay</dialog:say>
			<goto state="pain"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="pain"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="pain"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.PAIN)</exec>
			<dialog:say>Are you in pain?</dialog:say>
			<send event="action.gesture" p:name="'emotion_anger'"/>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<dialog:say>Where are you suffering from pain? In your eyes, your ears, your muscles or your chest?</dialog:say>
			<goto state="whatpain"/>
		</onevent>
		
		<onevent name="sense.user.speech**" cond="event?:sem:no"> 
			<dialog:say>Keep it up!</dialog:say>
			<goto state="evaluate"/>
		</onevent>
		
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="repain"  extends="Dialog">
		<onentry>
			<dialog:say>Are you in pain in another bodypart?</dialog:say>
			<send event="action.gesture" p:name="'emotion_anger'"/>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes">
			<dialog:say>Which one?</dialog:say> 
			<goto state="whatpain"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no"> 
			<dialog:say>Keep it up!</dialog:say>
			<goto state="evaluate"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="whatpain"  extends="Dialog">
		<onentry>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:eyes"> 
		<exec>map.answerSymptom(Symptom.PAIN_EYES)</exec>
			<dialog:say>Okay, your eyes</dialog:say>
			<goto state="repain"/>
			
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:ears"> 
		<exec>map.answerSymptom(Symptom.PAIN_EARS)</exec>	
			<dialog:say>Okay, your ears</dialog:say>
			<goto state="repain"/>
			
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:muscles">
			<exec>map.answerSymptom(Symptom.PAIN_MUSCLES)</exec>	
			<dialog:say>Okay, your muscles</dialog:say>
			<goto state="repain"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:chest"> 
			<exec>map.answerSymptom(Symptom.PAIN_CHEST)</exec>	
			
			<dialog:say>Okay, your chest</dialog:say>
			<goto state="repain"/>
			
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
	
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="evaluate">
		<onentry>
		<!-- So light! -->
		<exec>map.evaluate()</exec>
		<!-- Okay I've not seen the 'c' thing. We'll need to discuss about how you can get and test the percentages.
		Perhaps the following seems OK -->
		<var name="c" type="int" value="map.getPercentage(Disease.CONCUSSION)"/>
       	<if cond="(c&gt;70)">
			<goto state="dizzy"/>
		</if>
		</onentry>
	</state>
	
	
	<state id="frozen"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.FROZEN)</exec>	
			<dialog:say>Are you frozen?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.FROZEN)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="runnose"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="runnose"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="runnose"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.RUNNY_NOSE)</exec>	
			<dialog:say>Do you have a runny nose?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.RUNNY_NOSE)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="endevaluation"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="endevaluation"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="dizzy"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.DIZZY)</exec>	
			<dialog:say>Are you feeling dizzy?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.DIZZY)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="nausea"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="nausea"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="nausea"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.NAUSEA)</exec>	
			<dialog:say>Are you nauseous?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.NAUSEA)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="vomit"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="vomit"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="vomit"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.VOMIT)</exec>	
			<dialog:say>Have you vomited?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.VOMIT)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="amnesia"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="amnesia"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="amnesia"  extends="Dialog">
		<onentry>
			<exec>map.questionSymptom(Symptom.AMNESIA)</exec>	
			<dialog:say>Are you experiencing amnesia?</dialog:say>
			<dialog:listen/>
		</onentry>
		
		<onevent name="sense.user.speech**" cond="event?:sem:yes"> 
			<exec>map.answerSymptom(Symptom.AMNESIA)</exec>	
			<dialog:say>Okay</dialog:say>
			<goto state="endevaluation"/>
			
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Good for you</dialog:say>
			<goto state="endevaluation"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:repeat">
				<reentry/>
			</onevent>
		<onevent name="sense.user.speech**">
				<reentry/>
		</onevent>
	</state>
	
	<state id="endevaluation"  extends="Dialog">
		<onentry>
			<dialog:say>Hope you don't die!</dialog:say>
		</onentry>
	</state>

<!--  	<state id="Idle">
		<onentry>
			<dialog:attendNobody />
		</onentry>
		<onevent name="sense.user.enter">
			<dialog:attend target="event:agent"/>
			<dialog:say>Hi there</dialog:say>
			<goto state="RequestGame"/>
		</onevent>
	</state>
		
	<state id="Dialog">
		<onevent name="sense.user.leave"  cond="users.isAttending(event) or users.isAttendingAll()">
			<if cond="users.hasAny()">
				<dialog:attendRandom/>
				<reentry/>
			<else />
				<goto state="Goodbye"/>
			</if>
		</onevent>
	</state>
	
	<state id="RequestGame" extends="Dialog">
		<onentry>
			<if cond="users.hasMany()">
				<dialog:attendAll/>
			</if>
			<dialog:say>Do you want to play a game?</dialog:say>
			<dialog:listen/>
		</onentry>
		<onevent name="sense.user.speech**" cond="event?:sem:yes">
			<goto state="StartGame"/>
		</onevent>
		<onevent name="sense.user.speech**" cond="event?:sem:no">
			<dialog:say>Okay, maybe another time then</dialog:say>
			<goto state="Goodbye"/>
		</onevent>
		<onevent name="sense.user.speech**">
			<reentry/>
		</onevent>
	</state>
	
	<state id="StartGame" extends="Dialog">
		<onentry>
			<if cond="users.hasMany()">
				<dialog:attendAll/>
				<dialog:say>Okay, let's play a game of quiz. The first to reach <expr>winningScore</expr> points is the winner.</dialog:say>
			<else/>
				<dialog:say>Okay, let's play a game of quiz. Let's try to see if you can get <expr>winningScore</expr> points.</dialog:say>
			</if>
			<goto state="NextQuestion"/>
		</onentry>
	</state>
	
	<state id="Goodbye">
		<onentry>
			<dialog:say>Goodbye</dialog:say>
			<goto state="Idle"/>
		</onentry>
	</state>
	
	<state id="NextQuestion" extends="Dialog">
		<onentry>
			<exec>question = questions.next(); guess = 0</exec>
			<if cond="users.hasMany()">
				<random>
					<block>
						<dialog:attendOther/>
						<dialog:say>The next one is for you</dialog:say>
					</block>
					<block>
						<dialog:attendAll/>
						<dialog:say>Let's see who answers first</dialog:say>
					</block>
				</random>
			<else/>
				<dialog:say>Here comes the next question</dialog:say>
			</if>
			<goto state="ReadQuestion"/>
		</onentry>
	</state>
	
	<state id="ReadQuestion" extends="AwaitAnswer">
		<onentry>
			<dialog:say text="question.getFullQuestion()"/>
			<dialog:listen grammar="asList('default', question.getId())"/>
		</onentry>
	</state>
	
	<state id="ReadOptions" extends="AwaitAnswer">
		<onentry>
			<dialog:say text="question.getOptions()"/>
			<dialog:listen grammar="asList('default', question.getId())"/>
		</onentry>
	</state>
	
	<state id="AwaitAnswer" extends="Dialog">
		<onentry>
			<dialog:listen grammar="asList('default', question.getId())"/>
		</onentry>
		<onevent name="sense.user.speech.multi">
			<if cond="eq(event:sem:answer,question:correct)">
				<dialog:attend target="event:agent"/>
				<goto state="CorrectAnswer"/>
			<elseif cond="eq(event:other:sem:answer,question:correct)"/>
				<dialog:attend target="event:other:agent"/>
				<goto state="CorrectAnswer"/>
			<else/>
				<dialog:say>None of you were correct, let's try another question.</dialog:say>
				<goto state="NextQuestion"/>
			</if>
		</onevent>
		<onevent name="sense.user.speech">
			<if cond="eq(event:sem:answer,question:correct)">
				<goto state="CorrectAnswer"/>
				<else/>
				<goto state="IncorrectAnswer"/>
			</if>
		</onevent>
		<onevent name="sense.user.speech.other">
			<dialog:attendOther mode="'eyes'"/>
			<dialog:say>You were not supposed to answer that</dialog:say>
			<dialog:attendOther mode="'eyes'"/>
			<dialog:say>So, what is your answer?</dialog:say>
			<goto state="AwaitAnswer"/>
		</onevent>
		<onevent name="sense.user.speech.silence">
			<raise event="skip"/>
		</onevent>
		<onevent name="skip">
			<dialog:say>Give me your best guess</dialog:say>
			<goto state="AwaitAnswer"/>
		</onevent>
	</state>
	
	<state id="CorrectAnswer" extends="Dialog">
		<onentry>
			<exec>users:current:score = asInteger(users:current:score,0) + 1</exec>
			<dialog:say>That is correct, you now have a score of <expr>users:current:score</expr></dialog:say>
			<if cond="asInteger(users:current:score,0) &gt;= winningScore">
				<goto state="Winner"/>
			<else/>
				<goto state="NextQuestion"/>
			</if>
		</onentry>
	</state>
	
	<state id="IncorrectAnswer" extends="Dialog">
		<onentry>
			<dialog:say>That was wrong</dialog:say>
			<if cond="users.hasMany() and guess == 0">
				<exec>guess++</exec>
				<dialog:attendOther/>
				<dialog:say>Maybe you know the answer?</dialog:say>
				<goto state="AwaitAnswer"/>
			</if>
			<dialog:say>The correct answer was <expr>question:(question:correct)</expr></dialog:say>
			<goto state="NextQuestion"/>
		</onentry>
	</state>
	
	<state id="Winner" extends="Dialog">
		<onentry>
			<exec>users:current:score = 0</exec>
			<dialog:say>Congratulations, you are the winner</dialog:say>
			<if cond="users.hasMany()">
				<dialog:attendOther/>
				<exec>users:current:score = 0</exec>
				<dialog:say>I am sorry, but you lost.</dialog:say>
			</if>
			<goto state="Goodbye"/>
		</onentry>
	</state> -->

</flow>